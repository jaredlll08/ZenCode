if (!hasProperty('mainClass')) {
	ext.mainClass = 'org.openzen.zenscript.lsp.launcher.StdioLauncher'
}

dependencies {
	compile project(":LanguageServerCore")
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : "zencodelang",
				"Specification-Vendor"    : "ZenCodeLang",
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : "${version}",
				"Implementation-Vendor"   : "ZenCodeLang",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Class-Path"              : ".",
				"Main-Class"              : "org.openzen.zenscript.lsp.launcher.StdioLauncher"
		])
	}
}

task fatJar(type: Jar) {
	baseName = 'all-in-one-jar'
	manifest {
		attributes([
				"Specification-Title"     : "zencodelang",
				"Specification-Vendor"    : "ZenCodeLang",
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : "${version}",
				"Implementation-Vendor"   : "ZenCodeLang",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Class-Path"              : ".",
				"Main-Class"              : "org.openzen.zenscript.lsp.launcher.StdioLauncher"
		])
	}

	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
			{
				exclude "META-INF/INDEX.LIST"
				exclude "META-INF/*.SF"
				exclude "META-INF/*.DSA"
				exclude "META-INF/*.RSA"
			}
	with jar
}